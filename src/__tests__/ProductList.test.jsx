import { describe, it, expect, vi, beforeEach } from "vitest";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import PageProductList from "../pages/PageProductList";
import { BrowserRouter } from "react-router-dom";
import * as productApi from "../api/products";

vi.mock("../api/products");

const renderWithProviders = (ui) => {
  return render(<BrowserRouter>{ui}</BrowserRouter>);
};

describe("ProductList Integration", () => {
  beforeEach(() => {
    const customProducts = [
      {
        id: "a1",
        brand: "Samsung",
        model: "Galaxy S21",
        price: "800",
        imgUrl: "/img/s21.jpg",
      },
      {
        id: "a2",
        brand: "Samsung",
        model: "Galaxy A12",
        price: "300",
        imgUrl: "/img/a12.jpg",
      },
      {
        id: "a3",
        brand: "Apple",
        model: "iPhone 13",
        price: "1000",
        imgUrl: "/img/iphone13.jpg",
      },
    ];

    const autoGenerated = Array.from({ length: 25 }, (_, i) => ({
      id: `g${i + 1}`,
      brand: i % 2 === 0 ? "Samsung" : "Apple",
      model: `Modelo ${i + 1}`,
      price: `${(i + 1) * 10}`,
      imgUrl: `/img/modelo-${i + 1}.jpg`,
    }));

    productApi.fetchProductList.mockResolvedValue([
      ...customProducts,
      ...autoGenerated,
    ]);
  });

  it("filters products based on search and brand", async () => {
    renderWithProviders(<PageProductList />);

    // Wait for the first product render (Galaxy S21)
    const galaxy = await screen.findByText(/Galaxy S21/i);
    expect(galaxy).toBeInTheDocument();

    // Simulate user input in the search bar
    const input = screen.getByPlaceholderText(/busca un producto/i);
    fireEvent.change(input, { target: { value: "Galaxy" } });

    // Wait for the filtered product list
    await waitFor(() => {
      const cards = screen.getAllByTestId("product-card");
      expect(cards).toHaveLength(2);
      cards.forEach((card) => {
        expect(card.textContent).toMatch(/Galaxy/);
      });
    });

    // Apply brand filter
    const brandSelect = screen.getByLabelText(/filtro por marca/i);
    fireEvent.change(brandSelect, { target: { value: "Samsung" } });

    // Only Samsung products should be displayed
    await waitFor(() => {
      const cards = screen.getAllByTestId("product-card");
      expect(cards).toHaveLength(2);
      cards.forEach((card) => {
        expect(card.textContent).toMatch(/Samsung/);
      });
    });
  });

  it("orders products by price ascending", async () => {
    renderWithProviders(<PageProductList />);

    const select = await screen.findByLabelText(/ordenado/i);
    fireEvent.change(select, { target: { value: "price_asc" } });

    const cards = await screen.findAllByTestId("product-card");
    const prices = cards.map((card) => {
      const match = card.textContent.match(/(\d+)\s?€/);
      return match ? parseInt(match[1], 10) : null;
    });

    const sorted = [...prices].sort((a, b) => a - b);
    expect(prices).toEqual(sorted);
  });

  it("shows loading spinner while fetching", async () => {
    renderWithProviders(<PageProductList />);
    const spinner = screen.getByRole("status");
    expect(spinner).toBeInTheDocument();

    await screen.findByText(/dispositivos móviles/i);
  });

  it("navigates to next page when clicking pagination", async () => {
    renderWithProviders(<PageProductList />);

    const page2 = await screen.findByRole("button", { name: "2" });
    fireEvent.click(page2);

    expect(screen.getByRole("button", { name: "2" })).toHaveClass(
      "bg-blue-600"
    );
  });
});
